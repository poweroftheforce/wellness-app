{"version":3,"sources":["../../../../server/api/plan/plan.model.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;AAEb,IAAI,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;;AAErE,IAAI,kBAAkB,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC;AAC3C,eAAa,EAAE,MAAM;AACrB,oBAAkB,EAAE,MAAM;AAC1B,8BAA4B,EAAE,MAAM;AACpC,YAAU,EAAE,MAAM;CACnB,CAAC,CAAC;;AAEH,IAAI,UAAU,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC;AACnC,SAAO,EAAE;AACR,QAAI,EAAE;AACH,WAAK,EAAE;AACL,YAAI,EAAE,MAAM;AACZ,gBAAQ,EAAE,IAAI;AACd,iBAAS,EAAE,EAAE,EAAC;AAChB,UAAI,EAAE;AACJ,YAAI,EAAE,MAAM;AACZ,gBAAQ,EAAE,IAAI;AACd,iBAAS,EAAE,EAAE,EAAC;KACjB;AACF,OAAG,EAAE,MAAM;AACX,SAAK,EAAE,MAAM;GACb;AACD,YAAU,EAAE;AACF,QAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ;AACpC,OAAG,EAAE,MAAM;AACX,YAAQ,EAAE,IAAI;GACvB;AACD,UAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,EAAE,aAAa,EAAE,CAAC;AACxE,eAAa,EAAE,CAAC,kBAAkB,CAAC;CACpC,EAAE;AACD,YAAU,EAAE,IAAI;AAChB,UAAQ,EAAE;AACR,YAAQ,EAAE,IAAI;GACf;AACD,QAAM,EAAE;AACN,YAAQ,EAAE,IAAI;GACf;CACF,CAAC,CAAC;;;;;;AAOF,UAAU,CACR,OAAO,CAAC,aAAa,CAAC,CACtB,GAAG,CAAC,YAAW;AACd,SAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,GAAG,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC;CAC/D,CAAC,CAAC;;;;;;;AASL,UAAU,CACP,IAAI,CAAC,WAAW,CAAC,CACjB,QAAQ,CAAC,UAAS,OAAO,EAAE;AAC1B,MAAI,CAAC,OAAO,EAAE;AACZ,WAAO,KAAK,CAAC;GACd,MACI,IAAI,OAAO,CAAC,KAAK,EAAE;AACtB,WAAO,KAAK,CAAC;GACd;AACD,SAAO,IAAI,CAAC;CACb,EAAE,0BAA0B,CAAC,CAAC;;qBAElB,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,UAAU,CAAC","file":"plan.model.js","sourcesContent":["'use strict';\n\nvar mongoose = require('bluebird').promisifyAll(require('mongoose'));\n\nvar drugReactionSchema = new mongoose.Schema({\n  drug_category: String,\n  nutrients_depleted: String,\n  potential_negative_reactions: String,\n  references: String\n});\n\nvar PlanSchema = new mongoose.Schema({\n  patient: {\n  \tname: {\n      first: {\n        type: String,\n        required: true,\n        maxlength: 30},\n      last: {\n        type: String,\n        required: true,\n        maxlength: 30}\n    },\n  \tdob: String,\n  \tnotes: String\n  },\n  _author_id: {\n            type: mongoose.Schema.Types.ObjectId,\n            ref: 'User',\n            required: true\n  },\n  sections: [{ type: mongoose.Schema.Types.ObjectId, ref: 'PlanSection' }],\n  drugReactions: [drugReactionSchema]\n}, {\n  timestamps: true,\n  toObject: {\n    virtuals: true\n  },\n  toJSON: {\n    virtuals: true\n  }\n});\n\n\n/**\n * Virtuals\n */\n\n PlanSchema\n  .virtual('patientName')\n  .get(function() {\n    return this.patient.name.first + ' ' + this.patient.name.last;\n  });\n\n\n\n/**\n * Validations\n */\n\n// Validate Patient\nPlanSchema\n  .path('createdAt')\n  .validate(function(patient) {\n    if (!patient) {\n      return false;\n    }\n    else if (patient.empty) {\n      return false;\n    }\n    return true;\n  }, 'Patient must be present!');\n\nexport default mongoose.model('Plan', PlanSchema);\n"]}